import { Message } from 'phosphor-messaging';
import { Panel } from 'phosphor-panel';
import { ChildMessage, Widget } from 'phosphor-widget';
import { Orientation, SplitLayout } from './layout';
/**
 * A panel which arranges its children into resizable sections.
 *
 * #### Notes
 * This class provides a convenience wrapper around a [[SplitLayout]].
 */
export declare class SplitPanel extends Panel {
    /**
     * Create a split layout for a split panel.
     */
    static createLayout(): SplitLayout;
    /**
     * Create a split handle for use in a split panel.
     *
     * #### Notes
     * This may be reimplemented to create custom split handles.
     */
    static createHandle(): HTMLElement;
    /**
     * Construct a new split panel.
     */
    constructor();
    /**
     * Dispose of the resources held by the panel.
     */
    dispose(): void;
    /**
     * Get the layout orientation for the split panel.
     */
    /**
     * Set the layout orientation for the split panel.
     */
    orientation: Orientation;
    /**
     * Get the inter-element spacing for the split panel.
     */
    /**
     * Set the inter-element spacing for the split panel.
     */
    spacing: number;
    /**
     * Get the normalized sizes of the widgets in the panel.
     *
     * @returns The normalized sizes of the widgets in the panel.
     */
    sizes(): number[];
    /**
     * Set the relative sizes for the child widgets in the panel.
     *
     * @param sizes - The relative sizes for the children in the panel.
     *   These values will be normalized to the available layout space.
     *
     * #### Notes
     * Extra values are ignored, too few will yield an undefined layout.
     */
    setSizes(sizes: number[]): void;
    /**
     * Get the split handle for the widget at the given index.
     *
     * @param index - The index of the widget of interest.
     *
     * @returns The split handle for the widget, or `undefined`.
     */
    handleAt(index: number): HTMLElement;
    /**
     * Handle the DOM events for the split panel.
     *
     * @param event - The DOM event sent to the panel.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the panel's DOM node. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * A message handler invoked on a `'child-added'` message.
     */
    protected onChildAdded(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'child-removed'` message.
     */
    protected onChildRemoved(msg: ChildMessage): void;
    /**
     * Handle the `'keydown'` event for the split panel.
     */
    private _evtKeyDown(event);
    /**
     * Handle the `'mousedown'` event for the split panel.
     */
    private _evtMouseDown(event);
    /**
     * Handle the `'mousemove'` event for the split panel.
     */
    private _evtMouseMove(event);
    /**
     * Handle the `'mouseup'` event for the split panel.
     */
    private _evtMouseUp(event);
    /**
     * Release the mouse grab for the split panel.
     */
    private _releaseMouse();
    private _pressData;
}
/**
 * The namespace for the `SplitPanel` class statics.
 */
export declare namespace SplitPanel {
    /**
     * A convenience alias of the `Horizontal` [[Orientation]].
     */
    const Horizontal: Orientation;
    /**
     * A convenience alias of the `Vertical` [[Orientation]].
     */
    const Vertical: Orientation;
    /**
     * Get the split panel stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @returns The split panel stretch factor for the widget.
     */
    function getStretch(widget: Widget): number;
    /**
     * Set the split panel stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @param value - The value for the stretch factor.
     */
    function setStretch(widget: Widget, value: number): void;
}
