import { Message } from 'phosphor-messaging';
import { PanelLayout } from 'phosphor-panel';
import { ChildMessage, ResizeMessage, Widget } from 'phosphor-widget';
/**
 * The orientation of a split layout.
 */
export declare enum Orientation {
    /**
     * Left-to-right horizontal orientation.
     */
    Horizontal = 0,
    /**
     * Top-to-bottom vertical orientation.
     */
    Vertical = 1,
}
/**
 * A factory object which creates handles for a split layout.
 */
export interface IHandleFactory {
    /**
     * Create a new split handle for use with a split layout.
     */
    createHandle(): HTMLElement;
}
/**
 * A layout which arranges its children into resizable sections.
 */
export declare class SplitLayout extends PanelLayout {
    /**
     * Construct a new split layout.
     *
     * @param factory - The handle factory for creating split handles.
     */
    constructor(factory: IHandleFactory);
    /**
     * Get the layout orientation for the split layout.
     */
    /**
     * Set the layout orientation for the split layout.
     */
    orientation: Orientation;
    /**
     * Get the inter-element spacing for the split layout.
     */
    /**
     * Set the inter-element spacing for the split layout.
     */
    spacing: number;
    /**
     * Get the normalized sizes of the widgets in the layout.
     *
     * @returns The normalized sizes of the widgets in the layout.
     */
    sizes(): number[];
    /**
     * Set the relative sizes for the child widgets in the layout.
     *
     * @param sizes - The relative sizes for the children in the layout.
     *   These values will be normalized to the available layout space.
     *
     * #### Notes
     * Extra values are ignored, too few will yield an undefined layout.
     */
    setSizes(sizes: number[]): void;
    /**
     * Get the handle for the widget at the given index.
     *
     * @param index - The index of the handle of interest.
     *
     * @returns The handle for the given index, or `undefined`.
     */
    handleAt(index: number): HTMLElement;
    /**
     * Move a split handle to the specified offset position.
     *
     * @param index - The index of the handle of the interest.
     *
     * @param position - The desired offset position of the handle. This
     *   is the absolute position relative to the origin of the parent.
     *
     * #### Notes
     * This will move the handle as close as possible to the desired
     * position. The sibling children will be adjusted as necessary.
     */
    moveHandle(index: number, position: number): void;
    /**
     * Initialize the children of the layout.
     *
     * #### Notes
     * This method is called automatically when the layout is installed
     * on its parent widget.
     */
    protected initialize(): void;
    /**
     * Attach a child widget to the parent's DOM node.
     *
     * @param index - The current index of the child in the layout.
     *
     * @param child - The child widget to attach to the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected attachChild(index: number, child: Widget): void;
    /**
     * Move a child widget in the parent's DOM node.
     *
     * @param fromIndex - The previous index of the child in the layout.
     *
     * @param toIndex - The current index of the child in the layout.
     *
     * @param child - The child widget to move in the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected moveChild(fromIndex: number, toIndex: number, child: Widget): void;
    /**
     * Detach a child widget from the parent's DOM node.
     *
     * @param index - The previous index of the child in the layout.
     *
     * @param child - The child widget to detach from the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected detachChild(index: number, child: Widget): void;
    /**
     * A message handler invoked on an `'after-show'` message.
     */
    protected onAfterShow(msg: Message): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'child-shown'` message.
     */
    protected onChildShown(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'child-hidden'` message.
     */
    protected onChildHidden(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'resize'` message.
     */
    protected onResize(msg: ResizeMessage): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * A message handler invoked on a `'fit-request'` message.
     */
    protected onFitRequest(msg: Message): void;
    /**
     * Fit the layout to the total size required by the child widgets.
     */
    private _fit();
    /**
     * Update the layout position and size of the child widgets.
     *
     * The parent offset dimensions should be `-1` if unknown.
     */
    private _update(offsetWidth, offsetHeight);
    private _fixed;
    private _spacing;
    private _normed;
    private _box;
    private _factory;
    private _sizers;
    private _handles;
    private _orientation;
}
/**
 * The namespace for the `SplitLayout` class statics.
 */
export declare namespace SplitLayout {
    /**
     * A convenience alias of the `Horizontal` [[Orientation]].
     */
    const Horizontal: Orientation;
    /**
     * A convenience alias of the `Vertical` [[Orientation]].
     */
    const Vertical: Orientation;
    /**
     * Get the split layout stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @returns The split layout stretch factor for the widget.
     */
    function getStretch(widget: Widget): number;
    /**
     * Set the split layout stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @param value - The value for the stretch factor.
     */
    function setStretch(widget: Widget, value: number): void;
}
